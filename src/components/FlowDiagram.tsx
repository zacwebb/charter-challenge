/**
 * FlowDiagram Component
 * Generated by Roo
 * 
 * This component demonstrates a simple flow diagram using @xyflow/react.
 * It creates a basic diagram with nodes and edges that can be interacted with.
 */
'use client';

import { useCallback, useEffect } from 'react';
import {
  ReactFlow,
  MiniMap,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  addEdge,
  Node,
  Edge,
  Connection,
  ConnectionMode,
  BackgroundVariant,
  useReactFlow,
  useNodesInitialized
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';
import { supabase } from '@/lib/supabase';
import { Card } from "@/components/ui/card"
import { Dispatch, SetStateAction } from 'react';
import { Tables } from '@/types/supabase';
import LabeledGroupNode from './LabeledGroupNode';
import Dagre from '@dagrejs/dagre';

// Initial edges
const initialEdges: Edge[] = [
  {
    id: 'e1-2',
    source: '1',
    target: '2',
  },
  {
    id: 'e2-3',
    source: '2',
    target: '3',
  },
  {
    id: 'e3-4',
    source: '3',
    target: '4',
  },
];

const getLayoutedElements = (nodes: Node[], edges: Edge[], options: { direction: string }) => {
  const g = new Dagre.graphlib.Graph().setDefaultEdgeLabel(() => ({}));
  g.setGraph({ rankdir: options.direction });
 
  edges.forEach((edge) => g.setEdge(edge.source, edge.target));
  nodes.forEach((node) =>
    g.setNode(node.id, {
      ...node,
      width: node.measured?.width ?? 0,
      height: node.measured?.height ?? 0,
    }),
  );
 
  Dagre.layout(g);
 
  return {
    nodes: nodes.map((node) => {
      const position = g.node(node.id);
      // We are shifting the dagre node position (anchor=center center) to the top left
      // so it matches the React Flow node anchor point (top left).
      const x = position.x - (node.measured?.width ?? 0) / 2;
      const y = position.y - (node.measured?.height ?? 0) / 2;
 
      return { ...node, position: { x, y } };
    }),
    edges,
  };
};

const nodeTypes = {
  labeledGroupNode: LabeledGroupNode,
};

interface FlowDiagramProps {
  systems: Tables<'system'>[] | undefined;
  onNodeAdd: () => void;
  setActiveSystemId: Dispatch<SetStateAction<number | null>>;
}

export default function FlowDiagram({ systems, onNodeAdd, setActiveSystemId }: FlowDiagramProps) {
  // Use the hooks to manage nodes and edges
  const [nodes, setNodes, onNodesChange] = useNodesState([] as Node[]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([] as Edge[]);
  const { fitView } = useReactFlow();
  const nodesInitialized = useNodesInitialized({});

  // Handle new connections between nodes
  const onConnect = useCallback(
    (params: Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  const deleteNodes = async (ids: number[]) => {
    await supabase
      .from('system')
      .delete()
      .in('id', ids);

      onNodeAdd();
  };

  // Do auto-layout when nodes are initialized
  useEffect(() => {
    if (nodesInitialized) {
      const layouted = getLayoutedElements(nodes, edges, { direction: 'TB' });
 
      setNodes([...layouted.nodes]);
      setEdges([...layouted.edges]);
 
      fitView();
    }
  }, [nodesInitialized]);

  // Format systems into Node structure
  useEffect(() => {
    if (!systems) return;

    const parentIds = systems.map((system) => system.parent_system_id);
    const allIds = systems.map((system) => system.id);

    const formattedNodes: Node[] = systems.map((system) => {
      const isGroupNode = system.parent_system_id === null || parentIds.includes(system.id);

      const formattedNode: Node = {
        id: system.id.toString(),
        data: { label: system.name },
        position: { x: 0, y: 0 },
        ...(isGroupNode ? { type: 'labeledGroupNode' } : {}),
      };

      if (isGroupNode) {
        formattedNode.style = system.parent_system_id === null ? { width: 450, height: 300 } : { width: 200, height: 150 };
      }

      if (system.parent_system_id !== null && allIds.includes(system.parent_system_id)) {
        formattedNode.parentId = system.parent_system_id.toString();
        formattedNode.extent = 'parent';
      }

      return formattedNode;
    });

    setNodes(formattedNodes);
  }, [systems, setNodes]);

  return (
    <Card style={{ width: '100%', height: '600px' }}>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        connectionMode={ConnectionMode.Loose}
        fitView
        nodeTypes={nodeTypes}
        onNodeDoubleClick={(event, node) => {
          setActiveSystemId(parseInt(node.id));
        }}
        onNodesDelete={async (nodes) => {
          await deleteNodes(nodes.map((node) => parseInt(node.id)))
        }}
      >
        <Controls />
        <MiniMap />
        <Background variant={BackgroundVariant.Dots} gap={12} size={1} />
      </ReactFlow>
    </Card>
  );
}