/**
 * FlowDiagram Component
 * Generated by Roo
 * 
 * This component demonstrates a simple flow diagram using @xyflow/react.
 * It creates a basic diagram with nodes and edges that can be interacted with.
 */
'use client';

import { useCallback, useEffect, useState } from 'react';
import {
  ReactFlow,
  MiniMap,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  addEdge,
  Node,
  Edge,
  Connection,
  ConnectionMode,
  Panel,
  BackgroundVariant,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';
import { supabase } from '@/lib/supabase';
import { Card } from "@/components/ui/card"

// Initial nodes
const initialNodes: Node[] = [
  {
    id: '1',
    type: 'input',
    data: { label: 'Supabase Database' },
    position: { x: 0, y: 0 },
  },
  {
    id: '2',
    data: { label: 'Next.js API Routes' },
    position: { x: 0, y: 0 },
  },
  {
    id: '3',
    data: { label: 'React Components' },
    position: { x: 0, y: 0 },
  },
  {
    id: '4',
    type: 'output',
    data: { label: 'User Interface' },
    position: { x: 0, y: 0 },
  },
];

// Initial edges
const initialEdges: Edge[] = [
  {
    id: 'e1-2',
    source: '1',
    target: '2',
  },
  {
    id: 'e2-3',
    source: '2',
    target: '3',
  },
  {
    id: 'e3-4',
    source: '3',
    target: '4',
  },
];


import { Dispatch, SetStateAction } from 'react';
import { Tables } from '@/types/supabase';

interface FlowDiagramProps {
  systems: Tables<'system'>[] | undefined;
  onNodeAdd: () => void;
  setActiveSystemId: Dispatch<SetStateAction<number | null>>;
}

export default function FlowDiagram({ systems, onNodeAdd, setActiveSystemId }: FlowDiagramProps) {
  // Use the hooks to manage nodes and edges
  const [nodes, setNodes, onNodesChange] = useNodesState([] as Node[]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([] as Edge[]);
  const [nodeName, setNodeName] = useState('');

  // Handle new connections between nodes
  const onConnect = useCallback(
    (params: Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  // Add a new node to the diagram
  const addNode = useCallback(async () => {
    if (!nodeName) return;
    
    await supabase.from('system').insert({ name: nodeName });

    setNodeName('');
    onNodeAdd();
  }, [nodeName, systems, onNodeAdd]);

  const deleteNodes = async (ids: number[]) => {
    await supabase
      .from('system')
      .delete()
      .in('id', ids);

      onNodeAdd();
  };

  useEffect(() => {
    if (systems) {
      const formattedNodes: Node[] = systems.map((system) => ({
        id: system.id.toString(),
        data: {
          label: system.name,
        },
        position: { x: 0, y: 0 },
      }));
      setNodes(formattedNodes);
    }
  }, [systems, setNodes]);

  return (
    <Card style={{ width: '100%', height: '600px' }}>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        connectionMode={ConnectionMode.Loose}
        fitView
        onNodeDoubleClick={(event, node) => {
          setActiveSystemId(parseInt(node.id));
        }}
        onNodesDelete={async (nodes) => {
          await deleteNodes(nodes.map((node) => parseInt(node.id)))
        }}
        
      >
        <Controls />
        <MiniMap />
        <Background variant={BackgroundVariant.Dots} gap={12} size={1} />
        
        <Panel position="top-right" className="bg-white p-4 rounded-md shadow-md">
          <h3 className="text-lg font-bold mb-2">Add Node</h3>
          <div className="flex gap-2">
            <input
              type="text"
              value={nodeName}
              onChange={(e) => setNodeName(e.target.value)}
              placeholder="Node name"
              className="px-2 py-1 border rounded"
            />
            <button
              onClick={addNode}
              className="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600"
            >
              Add
            </button>
          </div>
        </Panel>
      </ReactFlow>
    </Card>
  );
}